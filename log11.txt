
======== ThreadID: 11 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 11 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 11 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 11 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 11 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 11 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 12 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 11 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 12 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 11 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 12 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 11 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 12 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 11 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12]


======== ThreadID: 12 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12]


======== ThreadID: 13 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12]


======== ThreadID: 11 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12]


======== ThreadID: 12 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12]


======== ThreadID: 13 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12]


======== ThreadID: 11 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12]


======== ThreadID: 12 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12]


======== ThreadID: 13 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12]


======== ThreadID: 11 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12]


======== ThreadID: 12 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12]


======== ThreadID: 13 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12]


======== ThreadID: 11 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 12 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 11 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 12 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 11 ========
ExecutionStack:
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 12 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 11 ========
ExecutionStack:
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 12 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 11 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 12 ========
ExecutionStack:
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 12 ========
ExecutionStack:
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 12 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 13 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20
300

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[12, 11, 13]


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20
300

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20
300

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20
300

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20
300

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v1;
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v2;
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
Ref(int) v3;
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
int cnt;
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v1, 2);
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v2, 3);
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
new(v3, 4);
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
createBarrier(cnt, rH(v2));
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));
)
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
fork
(
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));
)
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 2 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
awaitBarrier(cnt);
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:
print(rH(v3));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
wH(v1) = rH(v1) * 10;
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:

FileTable:

HeapTable:
1 -> 2
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 1 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:
print(rH(v1));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4

FileTable:

HeapTable:
1 -> 20
2 -> 3
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 2 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
awaitBarrier(cnt);
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
wH(v2) = rH(v2) * 10;
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 30
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:
print(rH(v2));

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]


======== ThreadID: 3 ========
ExecutionStack:

SymbolTable:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

OutputTable:
4
20
300

FileTable:

HeapTable:
1 -> 20
2 -> 300
3 -> 4

BarrierTable:
1 -> 3=[2, 1, 3]

